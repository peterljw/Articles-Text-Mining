sidebarPanel(
actionButton("button", "Click me"),
textInput("text", "Text")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
rm(ui)
ui <- fluidPage(
# Include shinyjs
useShinyjs()
# App title ----
titlePanel("Black Jack"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
actionButton("button", "Click me"),
textInput("text", "Text")
),
# Main panel for displaying outputs ----
mainPanel(
)
)
)
ui <- fluidPage(
# Include shinyjs
useShinyjs()
# App title ----
titlePanel("Black Jack"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
actionButton("button", "Click me"),
),
# Main panel for displaying outputs ----
mainPanel(
)
)
)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),  # Include shinyjs
actionButton("button", "Click me"),
textInput("text", "Text")
)
server <- function(input, output) {
observeEvent(input$button, {
toggle("text")  # toggle is a shinyjs function
})
}
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),  # Include shinyjs
actionButton("button", "Click me"),
textInput("text", "Text")
)
server <- function(input, output) {
observeEvent(input$button, {
toggle("text")  # toggle is a shinyjs function
})
}
shinyApp(ui, server)
install.packages('shinyjs')
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),  # Include shinyjs
actionButton("button", "Click me"),
textInput("text", "Text")
)
server <- function(input, output) {
observeEvent(input$button, {
toggle("text")  # toggle is a shinyjs function
})
}
shinyApp(ui, server)
install.packages("shinydashboard")
library(shiny)
library(shinydashboard)
library(shinyjs)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
useShinyjs(),
actionButton("button", "Click me"),
div(id = "hello", "Hello!")
)
)
server <- function(input, output) {
observeEvent(input$button, {
toggle("hello")
})
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- tagList(
useShinyjs(),
navbarPage(
"shinyjs with navbarPage",
tabPanel("tab1",
actionButton("button", "Click me"),
div(id = "hello", "Hello!")),
tabPanel("tab2")
)
)
server <- function(input, output, session) {
observeEvent(input$button, {
toggle("hello")
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(shinyjs)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
useShinyjs(),
actionButton("button", "Click me"),
div(id = "hello", "Hello!")
)
)
server <- function(input, output) {
observeEvent(input$button, {
toggle("hello")
})
}
shinyApp(ui, server)
library(readr)
SLID_Ontario <- read_delim("C:/Users/Kyria/Desktop/Coding/Projects/2019/School/Biostat 200B/hw4/SLID-Ontario.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(SLID_Ontario)
library(readr)
df <- read_delim("C:/Users/Kyria/Desktop/Coding/Projects/2019/School/Biostat 200B/hw4/SLID-Ontario.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
rm(SLID_Ontario)
df <- cbind(df, "log2wages" = log2(df$compositeHourlyWages))
View(df)
male_index <- (df$compositeHourlyWages == "Male")
malde_index
male_index
male_index <- (df$sex == "Male")
male_index
df_male <- df[male_index,]
View(df_male)
female_index <- (df$sex == "Female")
sum(female_index)
sum(male_index)
nrow(df)
df_male <- df[female_index,]
df_male <- df[male_index,]
df_female <- df[female_index,]
linear_male <- lm(log2wages ~ age, data = df_male)
linear_male
summary(linear_male)
sqr_male <- lm(log2wages ~ poly(age,2), data = df_male)
summary(sqr_male)
summary(linear_male)
cube_male <- lm(log2wages ~ poly(age,3), data = df_male)
linear_male <- lm(log2wages ~ poly(age,1), data = df_male)
summary(linear_male)
linear_male <- lm(log2wages ~ age, data = df_male)
sqr_male <- lm(log2wages ~ age+age^2, data = df_male)
summary(sqr_male)
sqr_male <- lm(log2wages ~ poly(age, 2, raw = T), data = df_male)
summary(sqr_male)
sqr_male <- lm(log2wages ~ poly(age, 2), data = df_male)
summary(sqr_male)
linear_male <- lm(log2wages ~ age, data = df_male)
sqr_male <- lm(log2wages ~ poly(age, 2), data = df_male)
cube_male <- lm(log2wages ~ poly(age,3), data = df_male)
qudra_male <- lm(log2wages ~ poly(age,4), data = df_male)
five_male <- lm(log2wages ~ poly(age,5), data = df_male)
six_male <- lm(log2wages ~ poly(age,6), data = df_male)
summary(cube_male)
summary(qudra_male)
summary(five_male)
six_male(summary)
summary(six_male)
summary(linear_male)
summary(sqr_male)
summary(cube_male)
summary(qudra_male)
summary(five_male)
linear_female <- lm(log2wages ~ age, data = df_female)
sqr_female <- lm(log2wages ~ poly(age, 2), data = df_female)
cube_female <- lm(log2wages ~ poly(age,3), data = df_female)
qudra_female <- lm(log2wages ~ poly(age,4), data = df_female)
five_female <- lm(log2wages ~ poly(age,5), data = df_female)
library(RSelenium)
# Initial Setup
driver <- rsDriver(port = 9515L)
library(RSelenium)
library(rvest)
library(tidyverse)
# require(RSelenium)
# Initial Setup
driver <- rsDriver(port = 9515L)
getChromeProfile()
startServer()
install.packages("wdman")
install.packages("wdman")
install.packages("wdman")
install.packages("wdman")
install.packages("wdman")
selServ <- selenium(verbose = FALSE)
selServ$process
library(wdman)
selServ <- selenium(verbose = FALSE)
selServ$process
library(RSelenium)
# Initial Setup
driver <- rsDriver()
selServ <- selenium(verbose = FALSE)
library(wdman)
selServ <- selenium(verbose = FALSE)
library(wdman)
selServ <- selenium(verbose = FALSE)
selServ$process
selServ$log()
library(RSelenium)
# Initial Setup
driver <- rsDriver()
library(RSelenium)
# Initial Setup
driver <- rsDriver()
library(wdman)
selServ <- selenium(verbose = FALSE)
selServ$log()
selServ <- selenium(verbose = FALSE, check = FALSE)
library(wdman)
selServ <- selenium(verbose = FALSE, check = FALSE)
selServ <- selenium(verbose = FALSE, check = T)
library(wdman)
selServ <- selenium(verbose = FALSE, check = T)
selServ$log()
library(wdman)
selServ <- chrome(check = T)
selServ <- chrome(verbose = FALSE, check = T)
selServ$log()
library(wdman)
selServ <- chrome(verbose = FALSE, check = T)
selServ$log()
selServ$stop()
library(RSelenium)
# Initial Setup
driver <- rsDriver()
topic <- "Data_science"
paste('https://en.wikipedia.org/wiki/', topic, sep = "")
page <- read_html(paste('https://en.wikipedia.org/wiki/', topic, sep = ""))
library(rvest)
library(tidyverse)
page <- read_html(paste('https://en.wikipedia.org/wiki/', topic, sep = ""))
library(rvest)
library(tidyverse)
topic <- "Data_science"
page <- read_html(paste('https://en.wikipedia.org/wiki/', topic, sep = ""))
content <- page %>%
html_nodes("p")
content <- page %>%
html_nodes("p") %>%
html_text()
content
str(content)
content <- content[[-1]]
content <- content[c(-1)]
content
content <- unlist(content[c(-1)])
content
gsub("\", "")
content <- unlist(content[c(-1)]) %>%
gsub("`\`", "")
content <- unlist(content[c(-1)])
content <- page %>%
html_nodes("p") %>%
html_text()
content <- unlist(content[c(-1)])
content <- gsub("`\`", "", content)
content
content <- page %>%
html_nodes("p") %>%
html_text()
content <- unlist(content[c(-1)])
content <- gsub("\\\\", "", content)
content
content <- page %>%
html_nodes("p") %>%
html_text()
content <- unlist(content[c(-1)])
content <- grepl("\\\\", "", content)
content
content <- page %>%
html_nodes("p") %>%
html_text()
content <- unlist(content[c(-1)])
content <- gsub("\\\\", "", content)
content
content <- sapply(content, function(x) gsub("\\\\", "", x))
content
content <- page %>%
html_nodes("p") %>%
html_text()
content <- unlist(content[c(-1)])
content[1]
content <- sapply(content, function(x) gsub("\\\\", "", x))
content[1]
content[2]
print(content[2])
content
content[1]
x <- "ab\c"
x <- "ab\c"
new_x <- gsub("\\\\", "", x)
"
x <- "ab\\\\c"
x <- "ab \ c"
new_x <- gsub("\\\\", "", x)
x <- "ab \ c"
x
new_x
content <- page %>%
html_nodes("p") %>%
html_text()
content <- unlist(content[c(-1)])
print(content[1])
content <- sapply(content, function(x) gsub("\\\\", "", x))
content[1]
names(content)
names(content) <- NA
content
content <- page %>%
html_nodes("p") %>%
html_text()
content <- unlist(content[c(-1)])
content <- sapply(content, function(x) gsub("\\\\", "", x))
content
content <- names(sapply(content, function(x) gsub("\\\\", "", x)))
content
content <- unlist(content[c(-1)])
topic <- "Machine_learning"
page <- read_html(paste('https://en.wikipedia.org/wiki/', topic, sep = ""))
content <- page %>%
html_nodes("p") %>%
html_text()
content
content[1]
get_content <- function(topic) {
page <- read_html(paste('https://en.wikipedia.org/wiki/', topic, sep = ""))
content <- page %>%
html_nodes("p") %>%
html_text()
return(content)
}
topic_list <- c("Data_science","Machine_learning", "Artificial_intelligence", "Natural_language_processing", "Computer_vision")
content_list <- list()
library(rvest)
library(tidyverse)
topic_list <- c("Data_science","Machine_learning", "Artificial_intelligence", "Natural_language_processing", "Computer_vision")
get_content <- function(topic) {
page <- read_html(paste('https://en.wikipedia.org/wiki/', topic, sep = ""))
content <- page %>%
html_nodes("p") %>%
html_text()
return(content)
}
content_list <- list()
for(topic in topic_list) {
content_list[[topic]] <- get_content(topic)
}
str(content_list)
content_list
content_list <- unlist(content_list)
setwd("C:/Users/Kyria/Desktop/wiki latent semantic analysis/wiki latent semantic analysis")
write.table(content_list, "text-content.txt", sep="\t")
write.table(content_list, "text-content.csv", sep="\t")
content_list
write.table(content_list, "text-content.txt")
topic_list <- c("Data_science","Machine_learning", "Artificial_intelligence", "Natural_language_processing", "Computer_vision")
get_content <- function(topic) {
page <- read_html(paste('https://en.wikipedia.org/wiki/', topic, sep = ""))
content <- page %>%
html_nodes("p") %>%
html_text()
return(content)
}
content_list <- list()
for(topic in topic_list) {
content_list[[topic]] <- get_content(topic)
}
x <- content_list[[1]]
x
x <- unlist(x)
x
x
x <- paste(x, sep="\n", collapse="")
x
write.table(x, "text-content.txt")
?gsub
x <- gsub("\\\\", "", x)
write.table(x, "text-content.txt")
x <- gsub("\\", "", x)
x <- gsub("\\", "", x, fixed=TRUE)
x
x <- gsub("[^A-Za-z0-9]", "", x)
x
topic_list <- c("Data_science","Machine_learning", "Artificial_intelligence", "Natural_language_processing", "Computer_vision")
get_content <- function(topic) {
page <- read_html(paste('https://en.wikipedia.org/wiki/', topic, sep = ""))
content <- page %>%
html_nodes("p") %>%
html_text()
return(content)
}
for(topic in topic_list) {
content <- get_content(topic)
content <- paste(content, sep="\n", collapse="")
content <- gsub("\\", "", content)
}
topic_list <- c("Data_science","Machine_learning", "Artificial_intelligence", "Natural_language_processing", "Computer_vision")
get_content <- function(topic) {
page <- read_html(paste('https://en.wikipedia.org/wiki/', topic, sep = ""))
content <- page %>%
html_nodes("p") %>%
html_text()
return(content)
}
for(topic in topic_list) {
content <- get_content(topic)
content <- paste(content, sep="\n", collapse="")
content <- gsub("\\\\", "", content)
}
get_content <- function(topic) {
page <- read_html(paste('https://en.wikipedia.org/wiki/', topic, sep = ""))
content <- page %>%
html_nodes("p") %>%
html_text()
return(content)
}
for(topic in topic_list) {
content <- get_content(topic)
content <- paste(content, sep="\n", collapse="")
content <- gsub("\\\\", "", content)
print(content)
}
for(topic in topic_list) {
content <- get_content(topic)
content <- paste(content, sep="\n", collapse="")
content <- gsub("\\", "", content, fixed = TRUE)
print(content)
}
for(topic in topic_list) {
content <- get_content(topic)
content <- paste(content, sep="\n", collapse="")
content <- gsub("\\", "", content, fixed = TRUE)
write.table(content, paste("topic",".txt"))
}
for(topic in topic_list) {
content <- get_content(topic)
content <- paste(content, sep="\n", collapse="")
content <- gsub("\\", "", content, fixed = TRUE)
write.table(content, paste(topic,".txt"))
}
content_list[[1]]
for(topic in topic_list) {
content <- unlist(get_content(topic))
content <- paste(content, sep="\n", collapse="")
content <- gsub("\\", "", content, fixed = TRUE)
write.table(content, paste(topic,".txt"))
}
for(topic in topic_list) {
content <- unlist(get_content(topic))
content <- paste(content, sep="\n", collapse="")
content <- gsub("\\", "", content, fixed = TRUE)
print(content)
write.table(content, paste(topic,".txt"))
}
for(topic in topic_list) {
content <- unlist(get_content(topic))
content <- paste(content, sep="\n", collapse="")
content <- gsub("\\", "", content, fixed = TRUE)
print(content)
write.table(content, paste(topic,".txt"), col.names = F)
}
for(topic in topic_list) {
content <- unlist(get_content(topic))
content <- paste(content, sep="\n", collapse="")
content <- gsub("\\", "", content, fixed = TRUE)
write.table(content, paste(topic,".txt"), col.names = F)
}
for(topic in topic_list) {
content <- unlist(get_content(topic))
content <- paste(content, sep="\n", collapse="")
content <- gsub("\\", "", content, fixed = TRUE)
write.table(content, paste(topic,".txt"), col.names = F, row.names = F)
}
for(topic in topic_list) {
content <- unlist(get_content(topic))
content <- paste(content, sep="\n", collapse="")
content <- gsub("\\", "", content, fixed = TRUE)
write.table(content, paste(topic,".txt"), col.names = F, row.names = F, quote = F)
}
